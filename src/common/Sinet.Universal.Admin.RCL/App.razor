@using Sinet.Universal.Admin.RCL.Shared
@using System.Security.Claims
@using Volo.Abp.Security.Claims
@inherits ProComponentBase
<MErrorHandler PopupType="ErrorPopupType.Snackbar" OnHandle="OnHandle" OnAfterHandle="OnAfterHandle">
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeView>
                    <Authorized>
                        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                       @*  <FocusOnNavigate RouteData="@routeData" Selector="h1" /> *@
                    </Authorized>
                    <NotAuthorized>
                        <MApp>
                            <div style="height:100%;margin:0;padding:0;">
                                <Sinet.Universal.Admin.RCL.Pages.Authentication.Login_v1 />
                            </div>
                        </MApp>
                    </NotAuthorized>
                </AuthorizeView>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
</MErrorHandler>

@code {
    [Inject]
    private IJSRuntime _jsRuntime { get; set; }

    [Inject]
    IAppService appService { get; set; }

    [Inject]
    public IPopupService PopupService { get; set; }

    Exception _exception { get; set; }

    protected override async void OnInitialized()
    {
        await appService.AuthenticateUserAsync(CurrentUser);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeAsync<string>("app.loadingStop");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnHandle(Exception exception)
    {
        _exception = exception;
    }

    private async void OnAfterHandle(Exception exception)
    {
        //await PopupService.EnqueueSnackbarAsync(exception);
    }

}